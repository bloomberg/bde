# BDE default options file
#
# DESCRIPTION
#
# This file provides the default options for all builds. It may be overidden
# on a group- or package-level basis by placing a file with the name
# of the group or package plus the suffix '.opts' in the relevant 'group' or
# 'package' subdirectory. For example: '<BDEROOT>/groups/bte/group/bte.opts'
# Options are processed into build macro files called '.vars' files by tools
# like bde_build.pl, from where they are used in makefiles.
#
# Options that should be inherited into dependent units of release can be
# placed into a '.defs' file instead -- see bce.defs for an example. The
# syntax of a '.defs' file is identical to that of an '.opts' file.
#
# Capabities are not defined here as there are no default capabilities. See
# bce.cap for an example.
#
# Use e.g. 'bde_buildoptions.pl -t dbg_exc_mt bde' to view the generated values
# for a given group, package, or component, on a given platform and for a
# given target build type. Use 'bde_buildoptions.pl -v <unit>' to see which
# options, definitions, and capability files are loaded and scanned to produce
# the va
#
# SYNTAX
#
# Each record in the 'options' file is a combination of the following fields:
#
# * Prefix: an optional command prefix defines how the record combines with
#   its predecessors. The two most common are:
#       no prefix or '++': accumulate, append with a space
#       '!!' override and completely replace the accumulated definition so far
#   Other commands include '<<' (append without a space) and '>>' (prepend).
#   See Build::Option::Commands for the full list.
#
# * UPLID (Unified PLatform ID) pattern: a wildcarded platform specification
#   that is matched against the determined or specified UPLID for a build.
#   The UPLID can be incomplete, or use '*' to indicate fields that match all
#   possible values.
#
# * UFID (Unified Flag ID) set: The record will *not* match if this UFID
#   contains flags that are *not* set in the UFID requested by the builder.
#   '_' matches any UFID. This field may now contain multiple flags in the
#   standard UFID format, i.e. 'shr_64'.
#
# * Variable name and value: the variable that is to be modified, and the
#   value to modify it with, as controlled by the command prefix.
#
# SEE ALSO
#
# bde_uplid.pl, bde_buildoptions.pl

# include a line like this into any derived opts file to have a list of which
# files were used to derive a list of values added as a value of the list.

*-          _   OPTS_FILE   = default.opts

#==============================================================================
# Metadata
#==============================================================================

*           _       BUILD_TYPE  =

*           dbg     BUILD_TYPE  = -DBDE_BUILD_TARGET_DBG

# if BDE_BUILD_TARGET_NO_EXC is NOT defined, bsls_buildtarget.h will define
# BDE_BUILD_TARGET_EXC.
*           _       EXC_BUILD_TYPE = -DBDE_BUILD_TARGET_NO_EXC
!! *        exc     EXC_BUILD_TYPE = -DBDE_BUILD_TARGET_EXC

*           _       BUILD_TYPE  = $(EXC_BUILD_TYPE)

*           ndebug  BUILD_TYPE  = -DBDE_BUILD_TARGET_NDEBUG
*           mt      BUILD_TYPE  = -DBDE_BUILD_TARGET_MT
*           opt     BUILD_TYPE  = -DBDE_BUILD_TARGET_OPT
*           shr     BUILD_TYPE  = -DBDE_BUILD_TARGET_SHR
*           win     BUILD_TYPE  = -DBDE_BUILD_TARGET_WINDOWED
*           safe    BUILD_TYPE  = -DBDE_BUILD_TARGET_SAFE
*           safe2   BUILD_TYPE  = -DBDE_BUILD_TARGET_SAFE_2
*           stlport BUILD_TYPE  = -DBDE_BUILD_TARGET_STLPORT
*           cpp11   BUILD_TYPE  = -DBDE_BUILD_TARGET_CPP11

*           _   BDE_CFLAGS    = $(BUILD_TYPE)
*           _   BDE_CXXFLAGS  = $(BUILD_TYPE)


# Portable linker symbols

!! unix-*                           _   BDE_STATIC = -Bstatic
!! unix-AIX-*                       _   BDE_STATIC = -bstatic
!! unix-Linux-*                     _   BDE_STATIC =
!! windows-*                        _   BDE_STATIC =

!! unix-*                           _   BDE_DYNAMIC = -Bdynamic
!! unix-AIX-*                       _   BDE_DYNAMIC = -bdynamic
!! unix-Linux-*                     _   BDE_DYNAMIC =
!! windows-*                        _   BDE_DYNAMIC =

#-# This variable converts 'def' to a specific compiler, i.e. it upgrades   #-#
#-# the UPLID if no specific compiler ID has been chosen. The ID is the 5th #-#
#-# element of the UPLID, so 'gcc' maps to 'g++' in the CXX variable, etc.  #-#

*                       _       BDE_COMPILER_FLAG        = def
!! windows              _       BDE_COMPILER_FLAG        = cl
!! unix-SunOS           _       BDE_COMPILER_FLAG        = cc
!! unix-AIX             _       BDE_COMPILER_FLAG        = xlc
!! unix-Linux           _       BDE_COMPILER_FLAG        = gcc
!! unix-Darwin          _       BDE_COMPILER_FLAG        = gcc
!! unix-NONSUCH         _       BDE_COMPILER_FLAG        = <Uncollapsed!>

#-# These configured values will be replaced with a mechanism to evaluate   #-#
#-# the actual compiler version in due course #-#

*           _   BDE_COMPILERVERSION_FLAG = 0
# For Windows, Uplid.pm deduces compiler version from availble cl.exe.
# Let's set this to a bogus value here.
!! windows                    _       BDE_COMPILERVERSION_FLAG = 999.999
!! unix-SunOS-*-*-cc          _       BDE_COMPILERVERSION_FLAG = 5.11
!! unix-SunOS-i386-*-cc       _       BDE_COMPILERVERSION_FLAG = 5.11
!! unix-SunOS-i386-*-cc      64       BDE_COMPILERVERSION_FLAG = 5.11
!! unix-SunOS-*-*-gcc         _       BDE_COMPILERVERSION_FLAG = 4.3.2
!! unix-AIX-*-*-gcc           _       BDE_COMPILERVERSION_FLAG = 3.4.3
!! unix-AIX-*-*-xlc           _       BDE_COMPILERVERSION_FLAG = 11.2
!! unix-Linux                 _       BDE_COMPILERVERSION_FLAG = 3.4.6
!! unix-Linux-x86_64-2.6.18   _       BDE_COMPILERVERSION_FLAG = 4.1.2
!! unix-Darwin                _       BDE_COMPILERVERSION_FLAG = 4.2.1
!! unix-NONSUCH               _       BDE_COMPILERVERSION_FLAG = <Uncollapsed!>

# The default command line option separator.  It's '-' on most platforms,
# and '/' on Windows
*                       _       SWITCHCHAR = -
!! windows              _       SWITCHCHAR = /

# Flag to add a directory to the include path for compilation step
!! *                    _       INCPATH_FLAG = $(SWITCHCHAR)I

#==============================================================================
# C++11 (a.k.a. C++0x) support
#==============================================================================

*                       cpp11   CPP11_FLAGS     =   --this-compiler-does-not-have-cpp11-support-configured
!! unix-*-*-*-gcc-4.4.3 cpp11   CPP11_FLAGS     =   -std=c++0x
!! unix-*-*-*-gcc-4.7.0 cpp11   CPP11_FLAGS     =   -std=c++11
*                       cpp11   BDE_CXXFLAGS    = $(CPP11_FLAGS)

#==============================================================================
# FLAGS: BDE_CFLAGS, BDE_CXXFLAGS, BDE_LDFLAGS
#==============================================================================
# Initial (target non-specific) values

*           _   DEF_CFLAGS  =
*           _   DEF_CXXFLAGS    =
*           _   DEF_F77FLAGS    =
*           _   DEF_LDFLAGS =
*           _   DEF_ENDLFGLAGS  =
# Special macros for extra includes, handled separately to allow pre-ordering
# (-I overrides if seen first, other flags override if seen last)
# C and C++ (not Fortran)
*           _   DEF_INCLUDE     =
# Language specific
*           _   DEF_CINCLUDE    =
*           _   DEF_CXXINCLUDE  =
*           _   DEF_F77INCLUDE  =

#===

unix-*-*-*-gcc      _   DEF_CFLAGS      = -pipe -std=gnu99
unix-*              _   DEF_CFLAGS      = -I$(DEPLOYED_INCLUDE)

!! unix-SunOS-*-*-cc-5.9 _  DEF_CXXFLAGS    = -m32 -xarch=sparcvis -xchip=generic -xcache=generic
!! unix-SunOS-*-*-cc-5.9 64 DEF_CXXFLAGS    = -m64 -xarch=sparcvis -xchip=generic -xcache=generic
!! unix-SunOS-*-*-CC64   _  DEF_CXXFLAGS    =
!! unix-AIX-*-*-xlc-*   _   AIX_UNLOCK_STREAMS = -D__NOLOCK_ON_INPUT -D__NOLOCK_ON_OUTPUT
!! unix-AIX-*-*-xlc-10.0 _   DEF_CXXFLAGS    = $(ARCH_TUNE) -qnotempinc -qfuncsect -qtbtable=small -qrtti=all -qsuppress=1500-029 -qsuppress=1540-2910 -qsuppress=1501-201 -qxflag=tocrel -qxflag=dircache:71,100 $(ENABLE_TLS) $(AIX_UNLOCK_STREAMS)
# inline rather than inline and optimize
!! unix-*-*-*-gcc   _   DEF_CXXFLAGS    = -pipe
!! unix-SunOS-*-*-gcc    _  DEF_CXXFLAGS    = -pipe -mcpu=ultrasparc3

!! unix-SunOS       _   F77_HASFLAG = -xhasi=yes
!! unix-SunOS       _   DEF_F77FLAGS    = -u -vax=bslash -vax=param -Nq2000 -Qoption f77pass1 $(F77_HASFLAG)

# DRQS 29544311 - some .so's linking against BCE and BAE fail unless the sources are built
# with -xthreadvar=dynamic
unix-SunOS-*-*-cc   mt  DEF_CXXFLAGS    = -xthreadvar=dynamic

# DRQS 40501760 - Studio 11 requires -xannotate=no
unix-SunOS-*-*-cc-5.11 _  DEF_CXXFLAGS    = -xannotate=no

# For MSVC compiler, disable warning 4661 which warns of functions with no
# bodies (e.g. private copy constructors) in explicitly instantiated class
# templates.
!! windows-*-*-*-def      _    DEF_CXXFLAGS    = /wd4661 /GR

# DRQS 17611641: Enforce that win2k is the minumum required OS version supported.
!! windows-*-*-*-def      _    WIN_VERSION_FLAGS      = /D_WIN32_WINNT=0x0500 /DWINVER=0x0500
!! windows-*-amd64-*-def  _    WIN_VERSION_FLAGS      = /D_WIN32_WINNT=0x0502 /DWINVER=0x0502

# The cleaned up set of default flags below can be used with any VC++ version
# since at least VS2003, but we're limiting the impact of changes to VS2008
# builds only.
# For VS2003, /Zc:wchar_t and /Zc:forScope must be added, they are the default
# since VS2005.
!! windows-*                        _    NOGDI           = /DNOGDI
!! windows-*-*-*-cl-15.00           _    DEF_CFLAGS      = /nologo /Oi /bigobj /we4715 /D_CRT_SECURE_NO_DEPRECATE /D_SCL_SECURE_NO_DEPRECATE /DNOMINMAX $(NOGDI) $(WIN_VERSION_FLAGS)
!! windows-*-*-*-cl-15.00           _    DEF_CXXFLAGS    = /nologo /Oi /bigobj /we4715 /D_CRT_SECURE_NO_DEPRECATE /D_SCL_SECURE_NO_DEPRECATE /DNOMINMAX $(NOGDI) /GR /wd4661 /we4150 /wd4510 /wd4610 $(WIN_VERSION_FLAGS)
!! windows-*-*-*-cl-16.00           _    DEF_CFLAGS      = /nologo /Oi /bigobj /we4715 /D_CRT_SECURE_NO_DEPRECATE /D_SCL_SECURE_NO_DEPRECATE /DNOMINMAX $(NOGDI) $(WIN_VERSION_FLAGS)
!! windows-*-*-*-cl-16.00           _    DEF_CXXFLAGS    = /nologo /Oi /bigobj /we4715 /D_CRT_SECURE_NO_DEPRECATE /D_SCL_SECURE_NO_DEPRECATE /DNOMINMAX $(NOGDI) /GR /wd4661 /we4150 /wd4510 /wd4610 $(WIN_VERSION_FLAGS)

# DRQS 13597546 - add -bmaxdata:0x5000000 to work around new exception issues
# and match our production setup
!! unix-AIX-*                _  DEF_LDFLAGS = -qstaticinit=ld -qtwolink -bh:5 -bmaxdata:0x50000000 $(XLC_SPECIAL_BBINDER_FLAGS) $(ARCH_TUNE)
!! unix-AIX-*-*-gcc          _  DEF_LDFLAGS =
unix-AIX-*-*-CC64            _  DEF_LDFLAGS = -b64
unix-AIX-*-*-xlc            64  DEF_LDFLAGS = -b64

# some POSIX API is provided in librt on Linux
unix-Linux-*-*-*             _  DEF_ENDLDFLAGS = -lrt

#===

*           _   BDE_INCLUDE     = $(DEF_INCLUDE)
*           _   BDE_CINCLUDE    = $(DEF_CINCLUDE)
*           _   BDE_CXXINCLUDE  = $(DEF_CXXINCLUDE)
*           _   BDE_F77INCLUDE  = $(DEF_F77INCLUDE)
*           _   BDE_CFLAGS      = $(DEF_CFLAGS)
*           _   BDE_CXXFLAGS    = $(DEF_CXXFLAGS)
*           _   BDE_F77FLAGS    = $(DEF_F77FLAGS)
*           _   BDE_LDFLAGS     = $(DEF_LDFLAGS)
*           _   BDE_ENDLDFLAGS  = $(DEF_ENDLDFLAGS)

unix-          _   BDE_LDFLAGS =  $(INTERNAL_LDFLAGS)

#==============================================================================
# Exception support - non-exceptions is default, so must override for exc

*           _   EXC_CXXFLAGS    =

#===

!! unix-SunOS-*-*-*     _   EXC_CXXFLAGS    = -features=no%except
!! unix-SunOS-*-*-*     exc EXC_CXXFLAGS    = -features=except
!! unix-AIX-*-*-*        _  EXC_CXXFLAGS    = -qnoeh
!! unix-AIX-*-*-*   exc EXC_CXXFLAGS    = -qeh -qlanglvl=newexcp
!! unix-*-*-*-gcc       _   EXC_CXXFLAGS    = -fno-exceptions
!! unix-*-*-*-gcc       exc EXC_CXXFLAGS    = -fexceptions
# /EHsc is equivalent to /GX and supported since a least VC2003
!! windows-             exc EXC_CXXFLAGS    = /EHsc

#===

*           _   BDE_CXXFLAGS    = $(EXC_CXXFLAGS)

#==============================================================================
# Debug builds

*           _   DBG_CFLAGS  =
*           _   DBG_CXXFLAGS    =
*           _   DBG_F77FLAGS    =
*           _   DBG_LDFLAGS =

#===

!! unix-        dbg DBG_CFLAGS      = -g

!! unix-        dbg DBG_CXXFLAGS    = -g
!! unix-SunOS-*-*-*-*    dbg     DBG_CXXFLAGS    = -g0
!! unix-SunOS-*-*-cc-5.9 dbg     DBG_CXXFLAGS    = -g0 -xdebugformat=stabs
!! unix-AIX-*-*-*        dbg     DBG_CXXFLAGS    = -g
# -Q suppressed above
!! unix-AIX-*-*-xlc-10.0  dbg     DBG_CXXFLAGS    = -qxflag=v6align -g -qalias=noansi -qxflag=inlinewithdebug  -qlanglvl=staticstoreoverlinkage -Q -qxflag=noautoinline

!! unix-*-*-*-gcc        dbg     DBG_CXXFLAGS    = -g
#!! unix-*-*-*-gcc       dbg     DBG_CXXFLAGS    = -g -O #correct but problematic
!! windows-*-*-*-cl-15.00                  dbg     DBG_CXXFLAGS    = /Zi /RTC1
!! windows-*-*-*-cl-15.00                  dbg     DBG_CFLAGS      = /Zi /RTC1
!! windows-*-*-*-cl-16.00                  dbg     DBG_CXXFLAGS    = /Zi /RTC1
!! windows-*-*-*-cl-16.00                  dbg     DBG_CFLAGS      = /Zi /RTC1
# /RTC1 will disable optimization completely so we need to turn it off for opt_dbg builds
!! windows-*-*-*-cl-15.00                  opt     DBG_CXXFLAGS    = /Zi
!! windows-*-*-*-cl-15.00                  opt     DBG_CFLAGS      = /Zi
!! windows-*-*-*-cl-16.00                  opt     DBG_CXXFLAGS    = /Zi
!! windows-*-*-*-cl-16.00                  opt     DBG_CFLAGS      = /Zi
!! unix         dbg DBG_F77FLAGS    = -g


# For MDd/MD and MTd/MT
windows         _   DBG_LIBSUFFIX   =
windows         dbg DBG_LIBSUFFIX   = d
!! windows-         dbg DBG_LDFLAGS     = /debug

#===

*           _   BDE_CFLAGS  = $(DBG_CFLAGS)
*           _   BDE_CXXFLAGS    = $(DBG_CXXFLAGS)
*           _   BDE_F77FLAGS    = $(DBG_F77FLAGS)
*           _   BDE_LDFLAGS = $(DBG_LDFLAGS)

#==============================================================================
# Safe builds

# Prevent ambiguity for operators in safe mode:
!! *                       safe    SAFE_CXXFLAGS   = -D_STLP_EXTRA_OPERATORS_FOR_DEBUG=1
!! windows                 safe    SAFE_CXXFLAGS   = /D"_STLP_EXTRA_OPERATORS_FOR_DEBUG"
!! *                       safe2   SAFE_CXXFLAGS   = -D_STLP_EXTRA_OPERATORS_FOR_DEBUG=1
!! windows                 safe2   SAFE_CXXFLAGS   = /D"_STLP_EXTRA_OPERATORS_FOR_DEBUG"

# Prevent transitive includes in safe mode (DRQS 30168600):
*                          safe    SAFE_CXXFLAGS   = $(SWITCHCHAR)DBDE_DONT_ALLOW_TRANSITIVE_INCLUDES
*                          safe2   SAFE_CXXFLAGS   = $(SWITCHCHAR)DBDE_DONT_ALLOW_TRANSITIVE_INCLUDES

#===

*           _   BDE_CXXFLAGS    = $(SAFE_CXXFLAGS)

#==============================================================================
# Optimized builds

*           _   OPT_CFLAGS  =
*           _   OPT_CXXFLAGS    =
*           _   OPT_F77FLAGS    =
*           _   OPT_LDFLAGS =

#===

!! unix-                opt OPT_CFLAGS      = -O -DNDEBUG
!! unix-*-*-*-gcc       opt OPT_CFLAGS      = -O2 -fno-strict-aliasing -DNDEBUG

!! unix-*-*-*-gcc       opt OPT_EXTRA_64_CXXFLAGS =
!! unix-*-*-*-gcc        64 OPT_EXTRA_64_CXXFLAGS = -fno-gcse

!! unix-                opt OPT_CXXFLAGS    = -O -DNDEBUG
!! unix-*-*-*-gcc       opt OPT_CXXFLAGS    = -O2 $(OPT_EXTRA_64_CXXFLAGS) -fno-strict-aliasing -DNDEBUG
!! unix-SunOS-*-*-cc    opt OPT_CXXFLAGS    = -O -DNDEBUG -xbuiltin=%all -xprefetch=no%auto,explicit
!! unix-AIX-*-*-xlc opt     OPT_CXXFLAGS    = -O -DNDEBUG -qalias=noansi

# DRQS 16407776: Studio 12 switched the meaning of -O from -xO2 to -xO3 - we want to use -xO3 explicitly to match plink.
!! unix-SunOS-*-*-cc-5.9 opt OPT_CFLAGS        = -xO3 -DNDEBUG
!! unix-SunOS-*-*-cc-5.9 opt OPT_CXXFLAGS      = -xO3 -DNDEBUG -xbuiltin=%all -xprefetch=no%auto,explicit

#!! windows-        opt OPT_CXXFLAGS    = /Ogitb1 /Gs /D"NDEBUG"
#Changing these per Brock Peabody
!! windows-     opt OPT_CXXFLAGS    = /O2 /Ob1 /Oi /Ot /Gs /GF /Gy /D"NDEBUG"
# this is actually a shorter version of the above, plus buffer overflow checks
# disabled, plus fiber-safe TLS enabled.
!! windows-*-*-*-cl-15.00     opt OPT_CXXFLAGS    = /O2 /Ob1 /GS- /GT /DNDEBUG
!! windows-*-*-*-cl-16.00     opt OPT_CXXFLAGS    = /O2 /Ob1 /GS- /GT /DNDEBUG

!! unix         opt OPT_F77FLAGS    = -02

!! windows      opt OPT_LDFLAGS     = /nod:msvcrtd
# The option above is actually unacceptable, and necessary only due to
# linking with improperly built third-party libraries. Let's disable it
# for newer VS2008 builds.
# It would also make sense to add /OPT:REF and /OPT:ICF for building
# applications, but not test drivers. Test driver link time is too long
# already without linker optimiations.
!! windows-*-*-*-cl-15.00      opt OPT_LDFLAGS     =
!! windows-*-*-*-cl-16.00      opt OPT_LDFLAGS     =

#===

*           _   BDE_CFLAGS  = $(OPT_CFLAGS)
*           _   BDE_CXXFLAGS    = $(OPT_CXXFLAGS)
*           _   BDE_F77FLAGS    = $(OPT_F77FLAGS)
*           _   BDE_LDFLAGS = $(OPT_LDFLAGS)

#==============================================================================
# NDEBUG builds

*           _   NDEBUG_CFLAGS   =
*           _   NDEBUG_CXXFLAGS =

#===

unix-           ndebug  NDEBUG_CFLAGS   = -DNDEBUG

unix-           ndebug  NDEBUG_CXXFLAGS = -DNDEBUG

#===

*           _   BDE_CFLAGS  = $(NDEBUG_CFLAGS)
*           _   BDE_CXXFLAGS    = $(NDEBUG_CXXFLAGS)

#==============================================================================
# Threaded builds

*           _   MT_CFLAGS   =
*           _   MT_CXXFLAGS =
*           _   MT_F77FLAGS =
*           _   MT_LDFLAGS  =

#===

unix-               mt  MT_CFLAGS       = -D_REENTRANT

!! unix-SunOS-*-*-*     mt  MT_CXXFLAGS     = -D_POSIX_PTHREAD_SEMANTICS -mt
!! unix-AIX-*-*-*       mt      MT_CXXFLAGS     = -D_THREAD_SAFE -qthreaded -D_REENTRANT
!! unix-*-*-*-gcc   mt  MT_CXXFLAGS     = -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT
!! unix-SunOS-*-*-gcc   mt  MT_CXXFLAGS     = -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT -pthreads

# On SUN, we need to add -D_PTHREADS to compile in safe mode (don't know why).
!! unix-SunOS-*-*-*     mt_safe MT_CXXFLAGS     = -D_POSIX_PTHREAD_SEMANTICS -mt -D_PTHREADS
!! unix-SunOS-*-*-gcc   mt_safe MT_CXXFLAGS     = -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT -D_PTHREADS -pthreads
!! unix-AIX-*-*-gcc     mt_safe MT_CXXFLAGS     = -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT -D_PTHREADS

# see SHR_CXXFLAGS and DBG_LIBSUFFIX; forced to T in bce.opts and bte.opts
windows         _   MT_LIBTYPE  = L
!! windows      mt  MT_LIBTYPE  = T

!! unix-SunOS-*-*-*     mt  MT_LDFLAGS  = -Bdynamic -mt $(SHR_PRELDFLAGS)
!! unix-AIX-*-*-*       mt  MT_LDFLAGS  = -bdynamic -lpthread $(SHR_PRELDFLAGS) -qthreaded
!! unix-*-*-*-gcc       mt  MT_LDFLAGS  = -lthread
!! unix-SunOS-*-*-gcc   mt  MT_LDFLAGS  = -lthread
!! unix-AIX-*-*-gcc     mt  MT_LDFLAGS  = -lpthread
!! unix-Linux-*-*-*     mt  MT_LDFLAGS  = -lpthread
!! unix-Darwin-*-*-*    mt  MT_LDFLAGS  = -lpthread

!! unix-SunOS       mt  MT_F77FLAGS = -mt

#===

*           _   BDE_CFLAGS  = $(MT_CFLAGS)
*           _   BDE_CXXFLAGS    = $(MT_CXXFLAGS)
*           _   BDE_F77FLAGS    = $(MT_F77FLAGS)
*           _   BDE_LDFLAGS = $(MT_LDFLAGS)

#==============================================================================
# COMPILERS: CC, CXX, CXXLINK
#==============================================================================
# Regular Compiler

# Flags used by cscompile/glint and supported by gcc 4.3.2 (split into those supported
# by gcc 3.4.3, then by those supported by gcc 4+):
*-*-*-*-gcc _  GCCEXTRAWFLAGS  = -Wcast-align -Wcast-qual \
    -Wall -Wextra -Wformat-security -Wformat-y2k -Winit-self \
    -Wno-long-long -Wno-unknown-pragmas \
    -Wpacked -Wpointer-arith \
    -Wwrite-strings -Wno-unused-value -Wno-char-subscripts -Wsign-compare \
    -Wparentheses

*-*-*-*-gcc-4.2 _  GCCEXTRAWFLAGS  = -Wlogical-op -Wstrict-overflow -Wvla \
    -Wvolatile-register-var -fdiagnostics-show-option

!! *-*-*-*-gcc-clang _  GCCEXTRAWFLAGS  = -Wcast-align -Wcast-qual \
    -Wall -Wextra -Wformat-security -Wformat-y2k -Winit-self \
    -Wno-long-long -Wno-unknown-pragmas \
    -Wpacked -Wpointer-arith \
    -Wwrite-strings -Wno-unused-value -Wno-char-subscripts -Wsign-compare \
    -Wparentheses -Wstrict-overflow -Wvla \
    -Wvolatile-register-var -fdiagnostics-show-option

# Once the DRQS 22615679 warnings are cleaned up, we can reconsider making this
# error= to force these 64-bit portability warnings to be treated as errors.
#unix-SunOS-*-*-gcc  64  GCCEXTRAWERROR  = error=
unix-*-*-*-gcc   _  GCCEXTRAWERROR  =

unix-*-*-*-gcc-4.2   _  GCCEXTRAWFLAGS  =   \
     -Wno-sign-conversion -W$(GCCEXTRAWERROR)conversion -W$(GCCEXTRAWERROR)address \
     -W$(GCCEXTRAWERROR)type-limits -W$(GCCEXTRAWERROR)cast-align           \
     -W$(GCCEXTRAWERROR)sign-compare -W$(GCCEXTRAWERROR)format              \
     -W$(GCCEXTRAWERROR)overflow                                            \
     -W$(GCCEXTRAWERROR)larger-than-100000

*-*-*-*-gcc-4.3      _  GCCEXTRAWFLAGS  = -Werror=cast-qual

*                       _   CC64FLAGS   =
*-*-*-*-gcc             _   CC64FLAGS   = -m32
!! *-*-*-*-gcc          64  CC64FLAGS   = -m64
!! *-*-x86_64-*-gcc     _   CC64FLAGS   = -m64
!! *-*-x86_64-*-gcc     64  CC64FLAGS   = -m64
!! *-*-armv6l-*-gcc     _   CC64FLAGS   = -march=armv6zk
!! *-*-armv7l-*-gcc     _   CC64FLAGS   = -march=armv7-a
!! *-*-armv7b-*-gcc     _   CC64FLAGS   = -march=armv7-a

# DRQS 10505346 -- switch to -xtarget=ultra3 for Sun, -qarch=pwr4 -qtune=pwr5 for AIX
#old flags
unix-SunOS-*-*-CC64     _   CC64FLAGS   =  -m32 -xarch=sparcvis -xchip=generic -xcache=generic
#new flags for 64 bits - override the
# ultra3 setting
unix-SunOS-sparc-*-cc   64  CC64FLAGS   = -xarch=v8plusa -xchip=generic -xcache=generic
!! unix-SunOS-sparc-*-cc-5.9   64  CC64FLAGS   = -m64 -xarch=sparcvis -xchip=generic -xcache=generic
unix-SunOS-i386-*-cc    64  CC64FLAGS   = -xtarget=ultra3 -xarch=amd64
#done
# DRQS 11679791 -- override ARCHTUNE so production 64-bit builds work
# Changed 20110111 per gstrauss to match plink
!! unix-SunOS-sparc-*-cc   64  ARCHTUNE       = -xarch=v8plusa -xchip=generic -xcache=generic

# DRQS 16454001 -- remove use of ARCHTUNE_64 in default.opts
# Changed 20110111 per gstrauss to match plink
unix-SunOS-sparc-*-cc      64  BDE_CXXFLAGS   = -m64 -xarch=sparcvis -xchip=generic -xcache=generic

# DRQS 17197057 -- make -fPIC the default for 64-bit Linux builds
unix-Linux-*-*-gcc      64  CC64FLAGS   = -fPIC

# DRQS 22147649 -- allow PIC builds for static libs under SunOS
unix-SunOS-sparc-*-cc      pic  BDE_CXXFLAGS   = -xcode=pic32

# enable support for building with the Sun supplied version of STLPort as the
# default implementation of the Standard Library
unix-SunOS-*-*-cc       stlport     BDE_CXXFLAGS    = -library=stlport4 -template=no%extdef
unix-SunOS-*-*-cc       stlport     BDE_LDFLAGS     = -library=stlport4

# DRQS 29644737 - disable BSLS_IDENT to save space in bigs
*                   _   BDE_CXXFLAGS = $(SWITCHCHAR)DBSLS_IDENT_OFF

#old flags
unix-AIX-*-*-CC64   _   CC64FLAGS   = -q64
#new flags for 64 bits
unix-AIX-*-*-xlc    64  CC64FLAGS   = -q64
#done

*           _   CXX64FLAGS  = $(CC64FLAGS)

unix-                   _   CC      = $(RETRY_ON_SIGNAL) cc -DUSE_REAL_MALLOC $(CC64FLAGS)
unix-                   _   CXX     = $(RETRY_ON_SIGNAL) CC $(CXX64FLAGS)
!! unix-Linux-*-*-def   _   CC      = $(RETRY_ON_SIGNAL) $(COMPILERPATH)/gcc -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS)
!! unix-Darwin-*-*-def  _   CC      = $(RETRY_ON_SIGNAL) clang -DUSE_REAL_MALLOC -D__unix $(CC64FLAGS)

#==== The section below should probably be moved to another section for CXXFLAGS
# xlc 10 August PTF - All settings are identical to xlc-10.0 except for XLC_LOCATION
# xlc 11 January 2011 PTF - All settings are identical to xlc-10.0 except for XLC_LOCATION
!! unix-AIX-*-*-xlc-10.1 _   DEF_CXXFLAGS    = $(ARCH_TUNE) -qnotempinc -qfuncsect -qtbtable=small -qrtti=all -qsuppress=1500-029 -qsuppress=1540-2910 -qsuppress=1501-201 -qxflag=tocrel -qxflag=dircache:71,100 $(ENABLE_TLS) $(AIX_UNLOCK_STREAMS)
++ unix-AIX-*-*-xlc-11.1 _   DEF_CXXFLAGS    = -qdebug=nparseasm
# Note: must be the very last option for AIX/xlC/DEF_CXXFLAGS, to avoid
# overriding it with other options
unix-AIX-*-*-xlc-        _   DEF_CXXFLAGS    = -qxflag=UnwindTypedefInClassDecl
!! unix-AIX-*-*-xlc-10.1  dbg     DBG_CXXFLAGS    = -qxflag=v6align -g -qalias=noansi -qxflag=inlinewithdebug:stepOverInline -qlanglvl=staticstoreoverlinkage -Q -qxflag=noautoinline
!! unix-AIX-*-*-xlc-11.1  dbg     DBG_CXXFLAGS    = -qxflag=v6align -g -qalias=noansi -qxflag=inlinewithdebug:stepOverInline -qlanglvl=staticstoreoverlinkage -Q -qxflag=noautoinline
!! unix-AIX-*-*-xlc-10.1 opt     OPT_CXXFLAGS    = -O -DNDEBUG -qalias=noansi -qlanglvl=staticstoreoverlinkage
!! unix-AIX-*-*-xlc-11.1 opt     OPT_CXXFLAGS    = -O -DNDEBUG -qalias=noansi -qlanglvl=staticstoreoverlinkage
unix-AIX-*-*-xlc-11.2    opt     OPT_CXXFLAGS    = -qmaxmem=-1

!! unix-AIX-*-*-xlc  _   XLC_PATH   = xlc
!! unix-AIX-*-*-xlc  mt  XLC_PATH   = xlc_r
!! unix-AIX-*-*-xlc  _   XLCXX_PATH = xlC
!! unix-AIX-*-*-xlc  mt  XLCXX_PATH = xlC_r

!! unix-AIX-*-*-xlc       _  CC  = $(XLC_INTERNAL_PREFIX1) $(XLC_PATH) $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType
!! unix-AIX-*-*-xlc       _  CXX = $(XLC_INTERNAL_PREFIX1) $(XLCXX_PATH) $(CXX64FLAGS)

!! unix-AIX-*-*-xlc-10.0  _  CC  = $(XLC_INTERNAL_PREFIX2) $(XLC_PATH) $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType
!! unix-AIX-*-*-xlc-10.0  _  CXX = $(XLC_INTERNAL_PREFIX2) $(XLCXX_PATH) $(CC64FLAGS)

!! unix-AIX-*-*-xlc-10.1  _  CC  = $(XLC_INTERNAL_PREFIX2) $(XLC_PATH) $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType $(XLC_QPATH)
!! unix-AIX-*-*-xlc-10.1  _  CXX = $(XLC_INTERNAL_PREFIX2) $(XLCXX_PATH) $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType $(XLC_QPATH)

!! unix-AIX-*-*-xlc-11.1  _  CC  = $(XLC_INTERNAL_PREFIX2) $(XLC_PATH) $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType
!! unix-AIX-*-*-xlc-11.1  _  CXX = $(XLC_INTERNAL_PREFIX2) $(XLCXX_PATH) $(CC64FLAGS) -qxflag=NoKeepDebugMetaTemplateType

!! unix-AIX-*-*-gcc  _  AIX_GCC_PATH = gcc
!! unix-AIX-*-*-gcc  _  AIX_GXX_PATH = g++

!! unix-AIX-*-*-gcc  _  CC  = $(AIX_GCC_PREFIX) $(AIX_GCC_PATH) -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) -std=gnu99
!! unix-AIX-*-*-gcc  _  CXX = $(AIX_GCC_PREFIX) $(AIX_GXX_PATH) $(GCCEXTRAWFLAGS) $(CXX64FLAGS)
unix-AIX-*-*-gcc  _  CXX = -ftemplate-depth-150

!! unix-SunOS-*-*-cc  _  SUN_CC_PATH  = cc
!! unix-SunOS-*-*-cc  _  SUN_CXX_PATH = CC

!! unix-SunOS-*-*-cc-5.9  _   CC = $(SUN_CC_INTERNAL_PREFIX) $(SUN_CC_PATH) $(CC64FLAGS)
!! unix-SunOS-*-*-cc-5.9  _  CXX = $(SUN_CC_INTERNAL_PREFIX) $(SUN_CXX_PATH) $(CXX64FLAGS)

!! unix-SunOS-*-*-gcc  _  SUN_GCC_PATH = gcc
!! unix-SunOS-*-*-gcc  _  SUN_GXX_PATH = g++

!! unix-SunOS-*-*-gcc  _  CC  = $(SUN_GCC_INTERNAL_PREFIX) $(SUN_GCC_PATH)  -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) -std=gnu99
!! unix-SunOS-*-*-gcc  _  CXX = $(SUN_GCC_INTERNAL_PREFIX) $(SUN_GXX_PATH) $(GCCEXTRAWFLAGS) $(CXX64FLAGS)
unix-SunOS-*-*-gcc  _  CXX = -ftemplate-depth-150


!! unix-Linux-*-*-gcc  _  LINUX_GCC_PATH = gcc
!! unix-Linux-*-*-gcc  _  LINUX_GXX_PATH = g++

!! unix-Linux-*-*-gcc  _  CC  = $(LINUX_GCC_PREFIX) $(LINUX_GCC_PATH) -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) -std=gnu99
!! unix-Linux-*-*-gcc  _  CXX = $(LINUX_GCC_PREFIX) $(LINUX_GXX_PATH) $(GCCEXTRAWFLAGS) $(CXX64FLAGS)

!! windows-*-*-*-cl-15.00  _  CC  = $(WINDOWS_CC_PREFIX) cl /TC /W4 $(CC64FLAGS)
!! windows-*-*-*-cl-16.00  _  CC  = $(WINDOWS_CC_PREFIX) cl /TC /W4 $(CC64FLAGS)
!! windows-*-*-*-cl-15.00  _  CXX = $(WINDOWS_CC_PREFIX) cl /TP /W4 $(CXX64FLAGS)
!! windows-*-*-*-cl-16.00  _  CXX = $(WINDOWS_CC_PREFIX) cl /TP /W4 $(CXX64FLAGS)

# for development only; use Clang instead of gcc
!! unix-Linux-*-*-gcc-clang  _  CLANG_GCC_VER_CPP = -D__CLANG_GNUC__=4 -D__CLANG_GNUC_MINOR__=7 -D__CLANG_GNUC_PATCHLEVEL__=0
!! unix-Darwin-*-*-*         _  CLANG_GCC_VER_CPP = -D__CLANG_GNUC__=4 -D__CLANG_GNUC_MINOR__=2 -D__CLANG_GNUC_PATCHLEVEL__=1
!! unix-Linux-*-*-gcc-clang  _  CLANG_PATH   = clang
!! unix-Linux-*-*-gcc-clang  _  CLANGXX_PATH = clang++

!! unix-Linux-*-*-gcc-clang  _   CC = $(CLANG_PATH) -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) $(CLANG_GCC_VER_CPP) $(CLANG_INTERNAL_INC)
!! unix-Linux-*-*-gcc-clang  64  CC = $(CLANG_PATH) -DUSE_REAL_MALLOC $(GCCEXTRAWFLAGS) $(CC64FLAGS) $(CLANG_GCC_VER_CPP) $(CLANG_INTERNAL_INC_64)
!! unix-Linux-*-*-gcc-clang  _  CXX = $(CLANGXX_PATH) $(GCCEXTRAWFLAGS) $(CXX64FLAGS) $(CLANG_GCC_VER_CPP) $(CLANG_INTERNAL_INC)
!! unix-Linux-*-*-gcc-clang  64 CXX = $(CLANGXX_PATH) $(GCCEXTRAWFLAGS) $(CXX64FLAGS) $(CLANG_GCC_VER_CPP) $(CLANG_INTERNAL_INC_64)

!! unix-Darwin-*-*-def  _  CXX = $(RETRY_ON_SIGNAL) clang++ -D__unix $(CXX64FLAGS) $(CLANG_GCC_VER_CPP)

unix-               _   CXXLINK     = $(CXX)
unix-               _   CLINK   = $(CXXLINK)
windows-                _   CXXLINK     = $(RETRY_ON_SIGNAL) link /nologo /incremental:no /subsystem:console /machine:ix86 ws2_32.lib
!! windows-*-amd64-*-*  _   CXXLINK     = $(RETRY_ON_SIGNAL) link /nologo /incremental:no /subsystem:console /machine:X64 ws2_32.lib
windows-                _   CLINK   = $(CXXLINK)

unix            _   F77     = f77
# DRQS 10505346 -- switch to -xtarget=ultra3
unix-SunOS      _   F77     = -xarch=v8plusa -xchip=generic -xcache=generic

#==============================================================================
# User Customisation
#==============================================================================

# add to front
-- *            _   BDE_INCLUDE     = $(USER_INCLUDE)
-- *            _   BDE_CFLAGS  = $(USER_CFLAGS)
-- *            _   BDE_CXXFLAGS    = $(USER_CXXFLAGS)
-- *            _   BDE_F77FLAGS    = $(USER_F77FLAGS)

# add to back
*               _   BDE_INCLUDE     = $(USER_ENDINCLUDE)
*               _   BDE_CFLAGS      = $(USER_ENDCFLAGS)
*               _   BDE_CXXFLAGS    = $(USER_ENDCXXFLAGS)
*               _   BDE_F77FLAGS    = $(USER_ENDF77FLAGS)

# the link line is more involved...
*           _   BDE_PRELDFLAGS  = $(USER_PRELDFLAGS)
-- *        _   BDE_LDFLAGS = $(USER_LDFLAGS)
*           _   BDE_ENDLDFLAGS  = $(USER_ENDLDFLAGS)

#==============================================================================
# Add universal include paths to C and C++ specific include paths

*           _   BDE_CXXINCLUDE  = $(BDE_INCLUDE)
*           _   BDE_CINCLUDE    = $(BDE_INCLUDE)

#==============================================================================
# flags repatriated from bde_build.pl

*           _   BDEBUILD_CFLAGS        = $(BDE_CINCLUDES) $(BDE_CFLAGS)
*           _   BDEBUILD_CXXFLAGS      = $(BDE_CXXINCLUDES) $(BDE_CXXFLAGS)
*           _   BDEBUILD_F77FLAGS      = $(BDE_F77INCLUDES) $(BDE_F77FLAGS)
*           _   BDEBUILD_LDFLAGS       = $(BDE_PRELDFLAGS) $(BDE_LIBS) $(BDE_LDFLAGS) $(PREBUILT_LIBS) $(BDE_ENDLDFLAGS)

#==============================================================================
# !!!!! S P E C I A L    V A R I A B L E S !!!!!
# These variables are OVERRIDE-ONLY.
#
# !! must always be specified
#
# They are intended to be used to make last-ditch changes to flags to allow
# components or test drivers to build for a difficult platform, in exceptional
# cases.  For example, for unix-SunOS-i386-*-cc 64-bit, TESTDRIVER_CXXFLAGS
# will have to be redefined as
#
# !!  unix-SunOS-i386-*-cc 64 TESTDRIVER_BDEBUILD_CXXFLAGS = $(subst -g0,,$(BDEBUILD_CXXFLAGS))
#
# for some packages, since 4 test drivers cannot be build with debugging info
# turned on for that platform.
#
#   ***  DO  NOT  APPEND  TO  THESE  VARIABLES    ***
#   ***  THEY  ARE  INTENDED  TO  BE  OVERWRITTEN ***

!! *       _   COMPONENT_BDEBUILD_CFLAGS      = $(BDEBUILD_CFLAGS)
!! *       _   COMPONENT_BDEBUILD_CXXFLAGS    = $(BDEBUILD_CXXFLAGS)
!! *       _   COMPONENT_BDEBUILD_F77FLAGS    = $(BDEBUILD_F77FLAGS)
!! *       _   COMPONENT_BDEBUILD_LDFLAGS     = $(BDEBUILD_LDFLAGS)

!! *       _   TESTDRIVER_BDEBUILD_CFLAGS     = $(BDEBUILD_CFLAGS)
!! *       _   TESTDRIVER_BDEBUILD_CXXFLAGS   = $(BDEBUILD_CXXFLAGS)
!! *       _   TESTDRIVER_BDEBUILD_F77FLAGS   = $(BDEBUILD_F77FLAGS)
!! *       _   TESTDRIVER_BDEBUILD_LDFLAGS    = $(BDEBUILD_LDFLAGS)

