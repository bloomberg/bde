// s_baltst_sequencewithnilonly.cpp     *DO NOT EDIT*      @generated -*-C++-*-

#include <bsls_ident.h>
BSLS_IDENT_RCSID(s_baltst_sequencewithnilonly_cpp, "$Id$ $CSID$")

#include <s_baltst_sequencewithnilonly.h>

#include <bdlat_formattingmode.h>
#include <bdlat_valuetypefunctions.h>
#include <bdlb_print.h>
#include <bdlb_printmethods.h>
#include <bdlb_string.h>

#include <bdlb_nullablevalue.h>
#include <bsl_vector.h>
#include <bslim_printer.h>
#include <bsls_assert.h>

#include <bsl_cstring.h>
#include <bsl_iomanip.h>
#include <bsl_limits.h>
#include <bsl_ostream.h>
#include <bsl_utility.h>

namespace BloombergLP {
namespace s_baltst {

                         // -------------------------
                         // class SequenceWithNilOnly
                         // -------------------------

// CONSTANTS

const char SequenceWithNilOnly::CLASS_NAME[] = "SequenceWithNilOnly";

const bdlat_AttributeInfo SequenceWithNilOnly::ATTRIBUTE_INFO_ARRAY[] = {
    {
        ATTRIBUTE_ID_V,
        "v",
        sizeof("v") - 1,
        "",
        bdlat_FormattingMode::e_DEC
      | bdlat_FormattingMode::e_NILLABLE
    }
};

// CLASS METHODS

const bdlat_AttributeInfo *SequenceWithNilOnly::lookupAttributeInfo(
        const char *name,
        int         nameLength)
{
    for (int i = 0; i < 1; ++i) {
        const bdlat_AttributeInfo& attributeInfo =
                    SequenceWithNilOnly::ATTRIBUTE_INFO_ARRAY[i];

        if (nameLength == attributeInfo.d_nameLength
        &&  0 == bsl::memcmp(attributeInfo.d_name_p, name, nameLength))
        {
            return &attributeInfo;
        }
    }

    return 0;
}

const bdlat_AttributeInfo *SequenceWithNilOnly::lookupAttributeInfo(int id)
{
    switch (id) {
      case ATTRIBUTE_ID_V:
        return &ATTRIBUTE_INFO_ARRAY[ATTRIBUTE_INDEX_V];
      default:
        return 0;
    }
}

// CREATORS

SequenceWithNilOnly::SequenceWithNilOnly(bslma::Allocator *basicAllocator)
: d_v(basicAllocator)
{
}

SequenceWithNilOnly::SequenceWithNilOnly(const SequenceWithNilOnly& original,
                                         bslma::Allocator *basicAllocator)
: d_v(original.d_v, basicAllocator)
{
}

#if defined(BSLS_COMPILERFEATURES_SUPPORT_RVALUE_REFERENCES) \
 && defined(BSLS_COMPILERFEATURES_SUPPORT_NOEXCEPT)
SequenceWithNilOnly::SequenceWithNilOnly(SequenceWithNilOnly&& original) noexcept
: d_v(bsl::move(original.d_v))
{
}

SequenceWithNilOnly::SequenceWithNilOnly(SequenceWithNilOnly&& original,
                                         bslma::Allocator *basicAllocator)
: d_v(bsl::move(original.d_v), basicAllocator)
{
}
#endif

SequenceWithNilOnly::~SequenceWithNilOnly()
{
}

// MANIPULATORS

SequenceWithNilOnly&
SequenceWithNilOnly::operator=(const SequenceWithNilOnly& rhs)
{
    if (this != &rhs) {
        d_v = rhs.d_v;
    }

    return *this;
}

#if defined(BSLS_COMPILERFEATURES_SUPPORT_RVALUE_REFERENCES) \
 && defined(BSLS_COMPILERFEATURES_SUPPORT_NOEXCEPT)
SequenceWithNilOnly&
SequenceWithNilOnly::operator=(SequenceWithNilOnly&& rhs)
{
    if (this != &rhs) {
        d_v = bsl::move(rhs.d_v);
    }

    return *this;
}
#endif

void SequenceWithNilOnly::reset()
{
    bdlat_ValueTypeFunctions::reset(&d_v);
}

// ACCESSORS

bsl::ostream& SequenceWithNilOnly::print(bsl::ostream& stream,
                                         int           level,
                                         int           spacesPerLevel) const
{
    bslim::Printer printer(&stream, level, spacesPerLevel);
    printer.start();
    printer.printAttribute("v", this->v());
    printer.end();
    return stream;
}


}  // close package namespace
}  // close enterprise namespace

// GENERATED BY BLP_BAS_CODEGEN_2025.08.07
// USING bas_codegen.pl s_baltst_sequencewithnilonly.xsd --mode msg --includedir . --msgComponent sequencewithnilonly --noRecurse --noExternalization --noHashSupport --noAggregateConversion
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright 2025 Bloomberg Finance L.P. All rights reserved.
//      Property of Bloomberg Finance L.P. (BFLP)
//      This software is made available solely pursuant to the
//      terms of a BFLP license agreement which governs its use.
// ------------------------------- END-OF-FILE --------------------------------
